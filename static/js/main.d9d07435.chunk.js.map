{"version":3,"sources":["components/Header/header.js","components/Dashboard/sideNav.js","components/Dashboard/dataList.js","components/Dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SideNav","DataList","useState","players","setPlayers","loading","setLoading","region","setRegion","field","setField","searchInput","setSearchInput","getPlayersData","a","axios","get","data","console","log","useEffect","resultList","playersCity","filter","i","city","includes","length","filterBySearch","search","playersField","j","ifsc","toLowerCase","branch","bank_name","address","district","value","onChange","event","target","placeholder","keyField","columns","dataField","text","pagination","paginationFactory","animation","Dashboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9d07435.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css';\nexport default function Header() {\n    return (\n        <div className=\"siteHeader\">\n            Welcome to InfraTab\n        </div>\n    )\n}\n","import React from 'react';\nimport './dashboard.css';\nexport default function SideNav() { \n    return ( \n    <div className=\"sideNavLayout\"> \n        <p className=\"sideBarLink\">BANKS</p> \n    </div>  \n    )\n}","import React, {useState, useEffect} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport './dashboard.css';import axios from 'axios';\nexport default function DataList() { \n    const [players, setPlayers] = useState([]); \n    const [loading, setLoading] = useState(false); \n    const [region, setRegion] = useState(''); \n    const [field, setField] = useState(''); \n    const [searchInput, setSearchInput] = useState('');\n\n const getPlayersData = async()=>{\n    try{\n        const data = await axios.get(\"https://vast-shore-74260.herokuapp.com/banks?city=MUMBAI\");\n        setPlayers(data.data); \n        setLoading(true); \n    }catch(e){ console.log(e);\n} \n};\n const columns =[ \n    {dataField: \"bank_name\", text: \"Name\" }, \n    {dataField: \"ifsc\", text: \"IFSC\" }, \n    {dataField: \"branch\", text: \"Branch\" }, \n    {dataField: \"bank_id\", text: \"Bank ID\" }, \n    {dataField: \"address\", text: \"Address\" }, \n]; \nuseEffect(( ) => {\n    getPlayersData();\n},[]);\n\nconsole.log(players);\n const handleCitySelect = (event) => { \n    setRegion(event.target.value); \n    resultList(event.target.value); \n};\n const resultList = (region)=>{\n     const playersCity = players.filter(i => i.city.includes(region) ); \n     setPlayers(playersCity);\n    if(playersCity.length === 0 && region === 'MUMBAI'){\n         getPlayersData(); \n    } \n}\n const handleFieldSelect = (event) => { \n    setField(event.target.value); \n};\n const handleInputChange = (event) => {\n    setSearchInput(event.target.value); \n    if(event.target.value === ''){ \n        getPlayersData(); \n    } else{ \n        filterBySearch(event.target.value); \n    } \n}\n const filterBySearch = (search) => { \n    if(field === 'ifsc'){ \n        const playersField = players.filter(j => j.ifsc.toLowerCase().includes(search.toLowerCase()) );\n        setPlayers(playersField); \n    } else if(field === 'branch'){ \n        const playersField = players.filter(j => j.branch.toLowerCase().includes(search.toLowerCase()) ); \n        setPlayers(playersField); \n    } else if(field === 'bank_name'){ \n        const playersField = players.filter(j => j.bank_name.toLowerCase().includes(search.toLowerCase()) ); \n        setPlayers(playersField); \n    } else if(field === 'address'){ \n        const playersField = players.filter(j => j.address.toLowerCase().includes(search.toLowerCase()) );\n        setPlayers(playersField); \n    } else if(field === 'district'){ \n        const playersField = players.filter(j => j.district.toLowerCase().includes(search.toLowerCase()) );\n        setPlayers(playersField); \n    } \n} \nconsole.log(searchInput); \nreturn (\n    <div> \n        <div className=\"dashboardLayout\"> \n            <div className=\"filterOption\"> \n                <select value={region} onChange={handleCitySelect}> \n                    <option value='' >Select City</option> \n                    <option value='MUMBAI'>MUMBAI</option> \n                    <option value='DELHI'>DELHI</option> \n                    <option value='BANGALORE'>BANGALORE</option> \n                    <option value='PUNE'>PUNE</option> \n                    <option value='KOLKATA'>KOLKATA</option> \n                </select> \n                <select value={field} onChange={handleFieldSelect}> \n                    <option value='' >Select search field</option> \n                    <option value='ifsc'>IFSC</option> \n                    <option value='branch'>Branch</option> \n                    <option value='bank_name'>Branch Name</option> \n                    <option value='address'>Address</option> \n                    <option value='district'>DISTRICT</option> \n                </select> \n                <input placeholder=\"Search for...\" value={searchInput} onChange={handleInputChange} /> \n            </div>\n        {loading ?( \n        <BootstrapTable keyField=\"name\" data={players} columns={columns} pagination={paginationFactory()} />\n        ): (\n        <ReactBootStrap.Spinner animation=\"border\" />)\n        } \n        </div> \n    </div> \n    )\n}\n","import React from 'react';\nimport SideNav from './sideNav';\nimport DataList from './dataList';\nimport './dashboard.css';\nexport default function Dashboard() { \n    return ( \n    <div className=\"row dashboardLayout\">\n        <div className='col-sm-2 sideNavbar'>\n            <SideNav />\n        </div>\n        <div className='col-sm-10'> \n            <DataList />\n        </div>\n    </div>\n    )\n}","import React from 'react';\nimport './App.css';\n// import { Provider } from 'react-redux';// import store from './store';\nimport Header from './components/Header/header';\nimport Dashboard from './components/Dashboard/dashboard';\nfunction App() {\n   return ( \n    <div className=\"App\"> \n      <Header /> \n      <Dashboard /> \n    </div> \n    );\n  }\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport App from './App'; \nimport * as serviceWorker from './serviceWorker'; \nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\"; \nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\"; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode> \n    <App /> \n  </React.StrictMode>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change// unregister() to register() below. Note this comes with some pitfalls.// Learn more about service workers: https://bit.ly/CRA-PWAserviceWorker.unregister();"],"sourceRoot":""}